# Generated by Django 5.2.5 on 2025-08-07 00:08

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
from datetime import date # Import date for the data seeding


# --- START: Paste the create_final_data function here ---
def create_final_data(apps, schema_editor):
    """
    This function populates the database with the specific SQL data provided.
    It creates all states, addresses, companies, departments, grades,
    employees, pay, and records from the SQL script.
    """
    # Get all the necessary models
    MState = apps.get_model('payroll_manager', 'MState')
    MAddress = apps.get_model('payroll_manager', 'MAddress')
    MCompany = apps.get_model('payroll_manager', 'MCompany')
    MDepartment = apps.get_model('payroll_manager', 'MDepartment')
    MGrade = apps.get_model('payroll_manager', 'MGrade')
    Account = apps.get_model('payroll_manager', 'Account')
    MEmployee = apps.get_model('payroll_manager', 'MEmployee')
    MPaygrade = apps.get_model('payroll_manager', 'MPaygrade')
    MPay = apps.get_model('payroll_manager', 'MPay')
    TLeave = apps.get_model('payroll_manager', 'TLeave')
    TAchievement = apps.get_model('payroll_manager', 'TAchievement')

    print("\n[Seed] Populating database from SQL script...")

    # --- States ---
    MState.objects.get_or_create(state_code='TN', defaults={'state_name': 'Tamil Nadu'})
    MState.objects.get_or_create(state_code='WB', defaults={'state_name': 'West Bengal'})
    MState.objects.get_or_create(state_code='MP', defaults={'state_name': 'Madhya Pradesh'})
    MState.objects.get_or_create(state_code='UP', defaults={'state_name': 'Uttar Pradesh'})
    MState.objects.get_or_create(state_code='RA', defaults={'state_name': 'Rajasthan'})
    
    # --- Addresses ---
    state_tn = MState.objects.get(state_code='TN')
    state_wb = MState.objects.get(state_code='WB')
    state_mp = MState.objects.get(state_code='MP')
    state_up = MState.objects.get(state_code='UP')
    state_ra = MState.objects.get(state_code='RA')

    addr_101, _ = MAddress.objects.get_or_create(address_id=101, defaults={'building_details': 'Buil-A', 'road': '5th Road', 'landmark': 'Near City Mall', 'city': 'Kolkata', 'state': state_wb, 'country': 'India'})
    addr_102, _ = MAddress.objects.get_or_create(address_id=102, defaults={'building_details': 'Sun Buil', 'road': 'Beena Road', 'landmark': 'Near MeenaBazaar', 'city': 'Bareily', 'state': state_up, 'country': 'India'})
    addr_103, _ = MAddress.objects.get_or_create(address_id=103, defaults={'building_details': 'Coach Buil', 'road': 'Nani Road', 'landmark': 'Near Cine Hall', 'city': 'Jaipur', 'state': state_ra, 'country': 'India'})
    addr_104, _ = MAddress.objects.get_or_create(address_id=104, defaults={'building_details': 'Farmer Buil', 'road': 'Rajesh Road', 'landmark': 'Near Vellore Fort', 'city': 'Vellore', 'state': state_tn, 'country': 'India'})
    addr_105, _ = MAddress.objects.get_or_create(address_id=105, defaults={'building_details': 'Buil-X', 'road': 'Nano Road', 'landmark': 'Near MaxStore', 'city': 'Bhopal', 'state': state_mp, 'country': 'India'})
    addr_106, _ = MAddress.objects.get_or_create(address_id=106, defaults={'building_details': 'Office Buil', 'road': 'Nicco Park', 'landmark': 'Near SaltLake', 'city': 'Kolkata', 'state': state_wb, 'country': 'India'})

    # --- Companies ---
    comp_1, _ = MCompany.objects.get_or_create(company_id=1, defaults={'company_name': 'InfoBliss Capital', 'address': addr_101})
    comp_2, _ = MCompany.objects.get_or_create(company_id=2, defaults={'company_name': 'InfoBliss Cloud Solutions', 'address': addr_103})
    comp_3, _ = MCompany.objects.get_or_create(company_id=3, defaults={'company_name': 'InfoBliss Aegis', 'address': addr_104})

    # --- Departments ---
    dept_11, _ = MDepartment.objects.get_or_create(department_id=11, company=comp_1, defaults={'department_name': 'Human Resources'})
    dept_12, _ = MDepartment.objects.get_or_create(department_id=12, company=comp_2, defaults={'department_name': 'Human Resources'})
    dept_13, _ = MDepartment.objects.get_or_create(department_id=13, company=comp_1, defaults={'department_name': 'Marketing'})
    dept_14, _ = MDepartment.objects.get_or_create(department_id=14, company=comp_2, defaults={'department_name': 'Technical'})
    dept_15, _ = MDepartment.objects.get_or_create(department_id=15, company=comp_3, defaults={'department_name': 'Accounts & Finance'})
    dept_16, _ = MDepartment.objects.get_or_create(department_id=16, company=comp_3, defaults={'department_name': 'Production'})
    dept_17, _ = MDepartment.objects.get_or_create(department_id=17, company=comp_2, defaults={'department_name': 'Research & Development'})
    dept_18, _ = MDepartment.objects.get_or_create(department_id=18, company=comp_1, defaults={'department_name': 'Accounts & Finance'})
    
    # --- Grades ---
    grade_1, _ = MGrade.objects.get_or_create(grade_id=1, defaults={'grade_name': 'Head of Department'})
    grade_2, _ = MGrade.objects.get_or_create(grade_id=2, defaults={'grade_name': 'Senior Officer'})
    grade_3, _ = MGrade.objects.get_or_create(grade_id=3, defaults={'grade_name': 'Junior Staff'})
    grade_4, _ = MGrade.objects.get_or_create(grade_id=4, defaults={'grade_name': 'Janitor'})

    # --- Create Admin User ---
    if not Account.objects.filter(user_id=999).exists():
        Account.objects.create_superuser(user_id=999, password='adminpassword')
        print("-> Admin user '999' created.")

    # --- Create Employees, Accounts, Pay, etc. ---
    employees_data = [
        {'uid': 1, 'name': 'Rajesh Raushan', 'pass': 'rajesh123', 'dept': dept_11, 'comp': comp_1, 'addr': addr_102, 'doj': '2015-02-01', 'grade': grade_1},
        {'uid': 2, 'name': 'Vinay Verma', 'pass': 'vinay123', 'dept': dept_12, 'comp': comp_2, 'addr': addr_104, 'doj': '2014-09-12', 'grade': grade_1},
        {'uid': 3, 'name': 'Divya Doijod', 'pass': 'divya123', 'dept': dept_13, 'comp': comp_1, 'addr': addr_106, 'doj': '2019-12-01', 'grade': grade_2},
        {'uid': 4, 'name': 'Manisha Mangal', 'pass': 'manisha123', 'dept': dept_14, 'comp': comp_2, 'addr': addr_105, 'doj': '2018-08-30', 'grade': grade_2},
        {'uid': 5, 'name': 'Payal Pandey', 'pass': 'payal123', 'dept': dept_15, 'comp': comp_3, 'addr': addr_101, 'doj': '2018-05-23', 'grade': grade_1},
        {'uid': 6, 'name': 'Nandana Nair', 'pass': 'nandana123', 'dept': dept_16, 'comp': comp_3, 'addr': addr_104, 'doj': '2017-09-15', 'grade': grade_2},
        {'uid': 7, 'name': 'Anant Agarwal', 'pass': 'anant123', 'dept': dept_17, 'comp': comp_2, 'addr': addr_105, 'doj': '2020-04-11', 'grade': grade_3},
        {'uid': 8, 'name': 'Kanan Kapoor', 'pass': 'kanan123', 'dept': dept_18, 'comp': comp_1, 'addr': addr_102, 'doj': '2019-07-10', 'grade': grade_3},
        {'uid': 9, 'name': 'Tanmay Tandon', 'pass': 'tanmay123', 'dept': dept_15, 'comp': comp_3, 'addr': addr_102, 'doj': '2017-05-28', 'grade': grade_3},
        {'uid': 10, 'name': 'Farah Fisher', 'pass': 'farah123', 'dept': dept_11, 'comp': comp_1, 'addr': addr_103, 'doj': '2018-11-19', 'grade': grade_3},
        {'uid': 11, 'name': 'Howard Herman', 'pass': 'howard123', 'dept': dept_15, 'comp': comp_3, 'addr': addr_106, 'doj': '1995-08-25', 'grade': grade_4},
    ]

    for emp in employees_data:
        if not Account.objects.filter(user_id=emp['uid']).exists():
            user = Account.objects.create_user(user_id=emp['uid'], password=emp['pass'], is_employee=True)
            emp_profile = MEmployee.objects.create(
                employee=user, employee_name=emp['name'], department=emp['dept'], company=emp['comp'], 
                address=emp['addr'], employee_doj=emp['doj'], grade=emp['grade']
            )
            print(f"-> Created Employee: {emp['name']} ({emp['uid']})")

    # --- Paygrades, Pay, Leaves, and Achievements ---
    MPaygrade.objects.get_or_create(employee_id=1, defaults={'grade': grade_1, 'basic_amt': 400000, 'da_amt': 30000, 'pf_amt': 3000, 'medical_amt': 2500})
    MPaygrade.objects.get_or_create(employee_id=3, defaults={'grade': grade_2, 'basic_amt': 300000, 'da_amt': 20000, 'pf_amt': 2400, 'medical_amt': 2500})
    # Note: Not all employees have paygrade/pay in the SQL, which is fine.

    # --- Leaves and Achievements ---
    TLeave.objects.get_or_create(employee_id=1, leave_date='2020-09-11', defaults={'fin_year': 2020, 'leave_type': 'LWP', 'is_approved': 1})
    TLeave.objects.get_or_create(employee_id=4, leave_date='2020-10-23', defaults={'fin_year': 2020, 'leave_type': 'PL', 'is_approved': 0})
    TLeave.objects.get_or_create(employee_id=9, leave_date='2020-03-01', defaults={'fin_year': 2020, 'leave_type': 'CL', 'is_approved': 1})
    TLeave.objects.get_or_create(employee_id=11, leave_date='2020-07-10', defaults={'fin_year': 2020, 'leave_type': 'SL', 'is_approved': -1})
    
    TAchievement.objects.get_or_create(employee_id=11, achievement_date='2020-06-25', defaults={'achievement_type': '25 Years Of Service'})
    TAchievement.objects.get_or_create(employee_id=3, achievement_date='2020-11-12', defaults={'achievement_type': 'Good Customer Service'})

    print("[Seed] Database population complete.")

# --- END: Paste the create_final_data function here ---


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('user_id', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='user_id')),
                ('is_employer', models.BooleanField(default=False)),
                ('is_employee', models.BooleanField(default=False)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='last login')),
                ('is_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MAddress',
            fields=[
                ('address_id', models.AutoField(primary_key=True, serialize=False)),
                ('building_details', models.CharField(max_length=30)),
                ('road', models.CharField(max_length=20)),
                ('landmark', models.CharField(max_length=30)),
                ('city', models.CharField(max_length=30)),
                ('country', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'db_table': 'm_address',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MGrade',
            fields=[
                ('grade_id', models.IntegerField(primary_key=True, serialize=False)),
                ('grade_name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'm_grade',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MState',
            fields=[
                ('state_code', models.CharField(max_length=2, primary_key=True, serialize=False)),
                ('state_name', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'db_table': 'm_state',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MEmployee',
            fields=[
                ('employee', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('employee_name', models.CharField(max_length=30)),
                ('employee_doj', models.DateField()),
            ],
            options={
                'db_table': 'm_employee',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MCompany',
            fields=[
                ('company_id', models.IntegerField(primary_key=True, serialize=False)),
                ('company_name', models.CharField(max_length=50)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payroll_manager.maddress')),
            ],
            options={
                'db_table': 'm_company',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MDepartment',
            fields=[
                ('department_id', models.IntegerField(primary_key=True, serialize=False)),
                ('department_name', models.CharField(max_length=30)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payroll_manager.mcompany')),
            ],
            options={
                'db_table': 'm_department',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='maddress',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payroll_manager.mstate'),
        ),
        migrations.CreateModel(
            name='TLeave',
            fields=[
                ('fin_year', models.IntegerField()),
                ('leave_date', models.DateField()),
                ('leave_type', models.CharField(choices=[('CL', 'CL'), ('SL', 'SL'), ('PL', 'PL'), ('LWP', 'LWP')], max_length=4)),
                ('is_approved', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(-1)])),
                ('leave_id', models.AutoField(primary_key=True, serialize=False)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payroll_manager.memployee')),
            ],
            options={
                'db_table': 't_leave',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TAchievement',
            fields=[
                ('achievement_date', models.DateField()),
                ('achievement_type', models.CharField(max_length=80)),
                ('achievement_id', models.AutoField(primary_key=True, serialize=False)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payroll_manager.memployee')),
            ],
            options={
                'db_table': 't_achievement',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='memployee',
            name='address',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='payroll_manager.maddress'),
        ),
        migrations.AddField(
            model_name='memployee',
            name='company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payroll_manager.mcompany'),
        ),
        migrations.AddField(
            model_name='memployee',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payroll_manager.mdepartment'),
        ),
        migrations.AddField(
            model_name='memployee',
            name='grade',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payroll_manager.mgrade'),
        ),
        migrations.CreateModel(
            name='MPaygrade',
            fields=[
                ('basic_amt', models.IntegerField()),
                ('da_amt', models.IntegerField()),
                ('pf_amt', models.IntegerField()),
                ('medical_amt', models.IntegerField()),
                ('paygrade_id', models.AutoField(primary_key=True, serialize=False)),
                ('grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payroll_manager.mgrade')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payroll_manager.memployee')),
            ],
            options={
                'db_table': 'm_paygrade',
                'managed': True,
                'unique_together': {('employee_id', 'grade_id')},
            },
        ),
        migrations.CreateModel(
            name='MPay',
            fields=[
                ('fin_year', models.IntegerField()),
                ('gross_salary', models.IntegerField()),
                ('gross_dedn', models.IntegerField()),
                ('net_salary', models.IntegerField()),
                ('MPay_id', models.AutoField(primary_key=True, serialize=False)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payroll_manager.memployee')),
            ],
            options={
                'db_table': 'm_pay',
                'managed': True,
                'unique_together': {('fin_year', 'employee_id')},
            },
        ),
        # --- START: Add the RunPython operation here, as the LAST operation ---
        migrations.RunPython(create_final_data),
        # --- END: Add the RunPython operation here ---
    ]

